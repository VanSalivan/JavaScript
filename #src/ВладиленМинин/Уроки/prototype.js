// Prototype - Обьект с помощью которого мы расширяем свойства обьектов или классов
//                    с помощью его мы можем выстраивать наследование в JS

// Object - самый главный объект
const person = new Object({
    name: "Лев",
    age: 15,
    well: function () {
        console.log("Well mate")
    }
})

// Обращаемся к прототипу класса от которого мы создаем данный обьект и записываем ему новую функцию 
Object.prototype.sayHello = function () {
    console.log("Hello")
}

// create - метод с помощью которого мы создаем новые обьекты, в (передаем обьект который будет прототипом для переменной)
const lena = Object.create(person)

// Присваиваем обьекту на верхний уровень парамерт схожий в названии "ключе"
lena.name = "Elena"

// prototype работает СВЕРХУ Вниз, если он на верхнем уровне находит поле/функцию - сразу ее вызывает,
// иначе идет к прототипу и ищет в нем, если и в нем ничего нет -  идет дальше по цепочке прототипов

// lena.sayHello()
//     prototype - нет
//         prototype - нет
//             prototype => sayHello

// ВСЕ в JS является обьектами 
// const str = 'I am string' // объявление переменной на самом деле выглядит
const str = new String('I am string') // так, ведь у строки тоже есть методы

// __proto__ - свойство которое является ССЫЛКОЙ на прототип обьекта
// __proto__: name - название родительского класса который является родителем данного обьекта
