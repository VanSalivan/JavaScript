// По условиям: на вход нам приходит строка, содержащая только символы скобок. Следующие символы скобочек: ( ) { } [ ]. 
// Необходимо написать функцию, которая проверит такую строку и вернет в результате true или false — в зависимости от того, 
// является ли данная последовательность скобок валидной или нет.
// Вот несколько примеров, чтоб разобраться, что такое валидная, а что такое невалидная последовательность скобок: 
// "()" // true
// "()[]{}" // true
// "(]" // false
// "([)]" // false
// "{[]}" // true



// В качестве стека используем массив
// push - добавляет в конец | pop - удаляет последний элемент

const checkValid = (string) => {
  let stack = [];
  // для проверки на ново открывающуюся скобку
  let brackets = {
    ')': '(',
    ']': '[',
    '}': '{',
  };

  for (let i = 0; i < string.length; i++) {
    const current = string[i];
    // если это закрывающая скобка
    if (isClosedBracket(current)) {
      if (brackets[current] !== stack.pop()) { // проверка верхнего элемента нашего стека на неравенство открывающейся скобке
        return false
      }
      // если это открывающая скобка
    } else {
      stack.push(current)
    }
  }

  return stack.length === 0; // проверка на отсутствие в стеке скобок
}

// Проверка закрывающей скобки
function isClosedBracket(char) {
  // если indexOf вернет число больше -1 - то это закрывающая скобка
  return [')', '}', ']'].indexOf(char) > -1;
}

console.log(checkValid('([]{})'))