//? Object propertyDescription - описание полей обьекта

const person = Object.create(
    {}, // первый параметр это прототип
    {
        name: { // propertyDescription - набор полей для настройки работы с значениями полей
            value: 'Alexander', // параметр-поле хранящее значение
            enumerable: true, // параметр-поле доступно при перечислении свойств содержащего его объекта
            writable: true, // параметр-поле разрешающее изменять значение
            configurable: true //  параметр-поле разрешающее удалять значение поля из обьекта
        },
        birthDate: {
            value: 1992,
            enumerable: false, // параметр-поле по умолчанию false
            writable: false, // параметр-поле по умолчанию false
            configurable: false // параметр-поле по умолчанию false
        },
        //=================================================================
        //? getters / setters - используются в фреймворках для наблюдения за изменениями определенных полей

        age: {
            get() { // Функция, возвращающая значение свойства - В виде значения поля
                // обращаемся к обьекту дата.приводим к году - числовое значение года рождения
                return new Date().getFullYear() - this.birthDate
            },

            set(value) { // Функция, изменяющая значение свойства - срабатывает при изменении свойства
                console.log('Set age', value) // 
            }
        }
    })

console.log(person.age = 100)

for (let key in person) { // цикл for in так же бежит по прототипу данного обьекта
    // НЕОБХОДИМАЯ проверка для итерации for in Чтобы цикл не уходил в поля прототипа
    if (person.hasOwnProperty(key)) {
        console.log('Ключ', key, person[key])
    }
}