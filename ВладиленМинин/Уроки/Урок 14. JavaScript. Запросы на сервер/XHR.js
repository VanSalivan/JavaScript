const requestURL = 'https://jsonplaceholder.typicode.com/users';
//=================================================================
//* GET - запрос получения данных
//* POST - запрос для создания данных
//* DELETE - запрос удаления данных
//* PUT - запрос полного обновления элемента
//* PATCH - запрос для частичного обновления элемента
//=================================================================
//? XMLHttpRequest - это встроенный в браузер объект,
//? который даёт возможность делать HTTP - запросы к серверу без перезагрузки страницы.

// const xhr = new XMLHttpRequest(); // 1) создаем новый инстанс

// //* GET
// xhr.open('GET', requestURL); // 2) формируем запрос
// xhr.responseType = 'json'; // 3) responeType - тип ответа = json распарсивает строку

// // часто onerror несрабатывает - пишем проверку/обработку ошибку в методе onload
// xhr.onload = () => { // 4) событие положительного ответа загрузки
//     if (xhr.status >= 400) { // 5) Проверка на статус запроса    
//         console.error(xhr.response)
//     } else {
//         console.log(xhr.response) // respone - ответ
//     }
// }
// xhr.onerror = () => { // 6) событие отрицательного ответа загрузки
//     console.log('Ошибка')
// }

// xhr.send(); // 7) отправляем запрос

//=================================================================
//? Оборачиваем в функцию для создания Промисов

function createSend(method, url, body = null) { // функция получает метод "GET/SET и т.д.", второй параметр - адрес
    return new Promise((resolve, reject) => {

        const xhr = new XMLHttpRequest(); // создаем новый инстанс

        xhr.open(method, url);  // формируем запрос из динамически переданных параметров
        xhr.responseType = 'json';  // responeType - тип ответа = json распарсивает строку

        // Устанавливаем "хедеры" которые отправляются с запросом (Для 'POST')
        xhr.setRequestHeader('Content-Type', 'application/json') // название хедера

        xhr.onload = () => {      // событие положительного ответа загрузки
            if (xhr.status >= 400) { // Проверка на статус запроса    
                reject(xhr.response); // вызываем в случае ошибки запроса
            } else {
                resolve(xhr.response) // вызываем в случае успешной обработки запроса
            }
        }
        xhr.onerror = () => { // 6) событие отрицательного ответа загрузки
            reject('Ошибка')
        }
        // 7) отправляем запрос
        xhr.send(JSON.stringify(body)); // обьектом JSON превращаем обьект в строку  
    })
}

//=================================================================
//* Вызов функции и обработка данных

// createSend('GET', requestURL) // получаем промис
//     .then(data => console.log(data)) // для успешно полученных данных
//     .catch(err => console.error(err)) // для обработки ошибки при получении

//=================================================================
//* POST - вместе с методом и адрессом 3тьтим параметром должно отправляться "тело обьекта"

const body = {
    name: 'Alexander', // третьим параметром передаем обьект
    age: 29,
};

createSend('POST', requestURL, body) // третьим параметром передаем обьект
    .then(data => console.log(data))
    .catch(err => console.error(err))

//=================================================================
