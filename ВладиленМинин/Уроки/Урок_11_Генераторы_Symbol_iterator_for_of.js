//? Функции генераторы - порционно выдает некий результат определеный полями "yield"
//=================================================================
//* 1) Функция генератор обозначается символом function*
//* 2) yield - порционно выдает наружу результат 
//* 3) object.next() - возвращает обьект с ключами следующего "yield"
//* 4) Флаг done : true - означающий что в генераторе больше ничего нет
//* 5) Значения генератора необходимо записывать в переменную
//* 6) В генераторе уже определн символ итератор который и позволяет порционно возвращать значение
//=================================================================
function* strGenerator() {
    yield 'H'
    yield 'e'
    yield 'l'
    yield 'l'
    yield 'o'
}
const str = strGenerator()
//=================================================================
function* numberGen(n = 10) {
    for (let i = 0; i < n; i++) {
        yield i
    }
}
const num = numberGen(7);
//=================================================================
//* Имитация работы генераторов

const iterator = {
    gen(n = 10) { // параметр определяющий количество итераций цикла
        let i = 0; // стартовое значение счетчика
        return { // возвращает функцию
            next() { // функция возвращает значение итерации цикла
                if (i < n) { // если передаваемое число больше "n" счетчика нынешних итераций
                    return { value: ++i, done: false } // возвращает обьект с увеличиным значением i
                }
                return { value: undefined, done: true } // Иначе возвращает обьект с параметрами
            }
        }
    }
}

// Записываем в переменную
const iter = iterator.gen();
// Вызываем метод
const nextIter = iter.next(); // value 1
// Все слеюущие вызовы nextIter будут выдавать // value 1, т.к. это запись конктретной итерации
// если поемнять местами с nextIter2 значение изменитсься на следующую итерацию // value 2
const nextIter2 = iter.next(); // value 2

//=================================================================
//? for ("имя элемента для перебора" of [откуда перебираем элементы])
//* for of - перебирает каждый элемента, даже строку превращает в массив
//  работает с типом данных Symbol через Symbol.iterator

// for (el of 'Hello') { // el - символ итератор для переданного значения
//     console.log(el)
// }

//=================================================================

function* iter(n = 10) {
    for (let i = 0; i < n; i++) {
        yield i
    }
}

for (let symbolIterator of iter(6)) {
    console.log(symbolIterator)
}